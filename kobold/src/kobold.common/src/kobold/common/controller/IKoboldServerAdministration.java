/* * Copyright (c) 2003 - 2004 Necati Aydin, Armin Cont,  * Bettina Druckenmueller, Anselm Garbe, Michael Grosse,  * Tammo van Lessen,  Martin Plies, Oliver Rendgen, Patrick Schneider *  * Permission is hereby granted, free of charge, to any person obtaining * a copy of this software and associated documentation files (the "Software"), * to deal in the Software without restriction, including without limitation * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER  * DEALINGS IN THE SOFTWARE. * * $Id: IKoboldServerAdministration.java,v 1.12 2004/10/21 21:34:11 martinplies Exp $ */package kobold.common.controller;import kobold.common.io.RepositoryDescriptor;/** * Through this interface Kobold servers are accessed (on administration-level) * to create new (invalidate existing) productlines and to assign/unassign users  * to/from them. *   * @author contan */public interface IKoboldServerAdministration {        /**     * this method is used to check if the called Kobold server is reachable      * and can be administrated with the passed password     *       * @param adminPassword the Kobold server's administration password     *      * @return IKoboldServerAdministration.RETURN_OK, if the check was      *         successful, IKoboldServerAdministration.RETURN_FAIL if an error     *         occured while executing the method on the server,      *         IKoboldServerAdministration.RETURN_SERVER_UNREACHABLE if the     *         method could not be called on the server, RETURN_WRONG_PASSWORD     *         if the passed administration password has not been accepted by     *         the server.     *              */    public String checkAdministrability(String adminPassword);        /**     * call this method if you want to create a new productline on the Kobold     * server. Note that if there already exists a productline with the name     * 'nameOfProductline, the method will exit with an error.      *      * @param adminPassword the Kobold server's administration password     * @param nameOfProductline the new productline's desired name     * @param resource the file or directory name.     * @param repositoryDescriptor description of the repository for the new     *                             productline     *      * @return IKoboldServerAdministration.RETURN_OK, if the check was      *         successful, IKoboldServerAdministration.RETURN_FAIL if an error     *         occured while executing the method on the server,      *         IKoboldServerAdministration.RETURN_SERVER_UNREACHABLE if the     *         method could not be called on the server, RETURN_WRONG_PASSWORD     *         if the passed administration password has not been accepted by     *         the server, RETURN_NAME_ALREADY_REGISTERED if the new      *         productline's name has already been registered.      */    public String newProductline(String adminPassword,                                  String nameOfProductline,                                 String resource,                                 RepositoryDescriptor repositoryDescriptor);        /**     * this method removes the specified productline from the server.     *       * @param adminPassword the Kobold server's administration password     * @param nameOfProductline name of the productline that is to be      *                          invalidated     *      * @return IKoboldServerAdministration.RETURN_OK, if the check was      *         successful, IKoboldServerAdministration.RETURN_FAIL if an error     *         occured while executing the method on the server,      *         IKoboldServerAdministration.RETURN_SERVER_UNREACHABLE if the     *         method could not be called on the server,      *         RETURN_PRODUCTLINE_MISSING if the passed name has not been      *         registered, RETURN_WRONG_PASSWORD if the passed administration      *         password has not been accepted by the server.     */    public String invalidateProductline(String adminPassword,                                         String nameOfProductline);         /**     * This method assigns a user to a productline (users that are assigned     * directly to productlines act as the productline's ple).      *      * @param adminPassword the Kobold server's administration password     * @param nameOfProductline name of the productline that should be assigned     *                          a new PLE     * @param nameOfUser name of the user that should be assigned to the      *                   specified productline     *      * @return IKoboldServerAdministration.RETURN_OK, if the check was      *         successful, IKoboldServerAdministration.RETURN_FAIL if an error     *         occured while executing the method on the server,      *         IKoboldServerAdministration.RETURN_SERVER_UNREACHABLE if the     *         method could not be called on the server,      *         RETURN_PRODUCTLINE_MISSING if the specified productline doesn't     *         exists, RETURN_USER_MISSING if the specified user doesn't exist,     *         RETURN_WRONG_PASSWORD if the passed administration password has      *         not been accepted by the server.      */    public String assignPle(String adminPassword,                            String nameOfProductline,                            String nameOfUser);        /**     * This method unassigns a user (ple) from a productline.      *      * @param adminPassword the Kobold server's administration password     * @param nameOfProductline name of the productline that should "loose"     *                          the specified user     * @param nameOfUser username specifiing which user should be unassigned      *      * @return IKoboldServerAdministration.RETURN_OK, if the check was      *         successful, IKoboldServerAdministration.RETURN_FAIL if an error     *         occured while executing the method on the server,      *         IKoboldServerAdministration.RETURN_SERVER_UNREACHABLE if the     *         method could not be called on the server, RETURN_WRONG_PASSWORD     *         if the passed administration password has not been accepted by     *         the server.      */    public String unassignPle(String adminPassword,                               String nameOfProductline,                              String nameOfUser);        /**     * This method returns the usernames of all users that are assigned to     * the specified productline.     *      * @param adminPassword the Kobold server's administration password     * @param nameOfProductline name of the productline whose maintainers' names     *        should be returned     * @return String containing all assigned usernames (seperated by '\n') or     *         one of the IKoboldServerAdministration error strings     */    public String getPles(String adminPassword, String nameOfProductline);        /**     * This method returns the names of all productlines that are currently      * registered on the called Kobold server.     *       * @param adminPassword the Kobold server's administration password     * @return String containing all the registered productlines' names     *         (seperated by '\n')  or one of the IKoboldServerAdministration      *         error strings     */    public String getProductlines(String adminPassword);        /**     * This method returns the usernames of all registered users.     *      * @param adminPassword the Kobold server's administration password     * @return String containing all registered usernames (seperated by '\n')     *         or one of the IKoboldServerAdministration error strings     */    public String getRegisteredUsers(String adminPassword);        /**     * This method creates a new kobold user and adds it to the server.     *      * @param adminPassword the Kobold server's administration password     * @param username the new userï¿½s username     * @param fullname the new user's full name     * @param password the password for the new user     * @return RETURN_OK if the new user could be created successfully,      *         RETURN_FAIL if the server encountered an error (e.g. if the     *         passed username has already been assigned) or      *         RETURN_SERVER_UNREACHABLE if the Kobold server could not be     *         reached, RETURN_WRONG_PASSWORD if the passed administration      *         password has not been accepted by the server,      *         RETURN_NAME_ALREADY_ASSIGNED if the passed username has already     *         been registered.     */    public String addKoboldUser(String adminPassword,                                 String username,                                 String fullname,                                String password);        /**     * This method removes a registered user from the Kobold server     *      * @param adminPassword the Kobold server's administration password     * @param username username of the user that should be removed     * @return RETURN_OK if the user could be removed successfully,     *         RETURN_FAIL if the server encountered an error (e.g. if the     *         passed username has not been registered) or     *         RETURN_SERVER_UNREACHABLE if the Kobold server could not be     *         reached, RETURN_WRONG_PASSWORD if the passed administration      *         password has not been accepted by the server,      *         RETURN_USER_MISSING if the specified user doesn't exist.     */    public String removeKoboldUser(String adminPassword, String username);        /**     * @param adminPassword the Kobold server's administration password     * @param username name of the user that should be checked for assignements     * @return RETURN_USER_ASSIGNED if the specified user is still assigned to     *         at least one asset, RETURN_USER_NOT_ASSIGNED if the specified     *         user is not assigned to any asset, RETURN_FAIL if the server     *         encountered an error, RETURN_SERVER_UNREACHABLE if the Kobold     *         server was unreachable, RETURN_WRONG_PASSWORD if the passed      *         administration password has not been accepted by the server.     */    public String checkUserAssignements(String adminPassword, String username);        /**     * @see IKoboldServerAdministration#checkUserAssignements(String, String)     */    public static final String RETURN_USER_ASSIGNED = "USER_ASSIGNED";        /**     *  @see IKoboldServerAdministration#checkUserAssignements(String, String)     */    public static final String RETURN_USER_NOT_ASSIGNED = "USER_NOT_ASSIGNED";        /**     * The following String is returned by most IKoboldServerAdministration     * methods, if the called method completed without an error.     */    public static final String RETURN_OK = "OK";        /**     * The following String is returned by IKoboldServerAdministration     * methods, if the requested operation could not be performed due to an     * error on the server.     */    public static final String RETURN_FAIL = "FAIL";        /**     * The following String is returned by IKoboldServerAdministration methods     * if the passed administration password has not been accepted by the     * server.     */    public static final String RETURN_WRONG_PASSWORD = "WRONGPASSWORD";        /**     * The following String is returned by IKoboldServerAdministration     * methods, if the corresponding method on the "real" Kobold server could      * not be executed (that is fail of RP call).     */    public static final String RETURN_SERVER_UNREACHABLE = "SERVERNOTREACHABLE";        /**     * The following String is returned by some IKoboldServerAdministration     * methods if a passed productline doesn't exist on the server.     */    public static final String RETURN_PRODUCTLINE_MISSING = "PRODUCTLINEMISSING";        /**     * The following String is returned by some IKoboldServerAdministration     * methods if a passed username hasn't yet been registered on the server.     */    public static final String RETURN_USER_MISSING = "USERMISSING";        /**     * The following String is returned by some IKoboldServerAdministration     * methods if a passed name has already been registered (names of users and     * productlines must be unique).     */    public static final String RETURN_NAME_ALREADY_REGISTERED = "NAMEALREGIST";}
